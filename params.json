{"tagline":"Develop, test and deploy BOSH releases without BOSH","body":"# bosh-solo\r\n\r\nDevelop, test and deploy BOSH releases without BOSH. Develop an entire working system quickly before you deploy to production.\r\n\r\nBOSH releases describe a complete running system from the ground up - compiled packages from source, templated configuration files, and monit to start/stop processes. BOSH itself then allows you to deploy your release across 1 or more VMs with optional persistent disks on the target infrastructure of your choice.\r\n\r\nCompilation of packages is only performed once. Compilation errors of packages and template rendering errors in jobs do not affect the running system.\r\n\r\nThis is a tool to iteratively develop and test a BOSH release in a local or remote VM, without needing to use a running BOSH system.\r\n\r\n## Overview\r\n\r\nThis is a tool to use during development of your BOSH releases. Each time you make a change to a package (sources or packaging) or jobs (templates or scripts), you can apply the updates to a virtual machine (local Vagrant or remote).\r\n\r\nWhen applying each BOSH release into a VM you can specify which jobs to run (runs all by default) and what custom properties (aka databags or attributes) are to be applied to the templates. This way you can both document different use cases of your BOSH release and test that the examples work as expected.\r\n\r\n```\r\n[within the VM as root]\r\nsm bosh-solo update path/to/manifest.yml\r\n```\r\n\r\nIt may be a good idea to include example manifests within an `examples/` folder. For a two-tiered web application, possible manifests might be `examples/with_database.yml` with `examples/without_database.yml`. The latter might look like:\r\n\r\n``` yaml\r\n---\r\njobs:\r\n  - webapp\r\n  - postgres\r\nproperties:\r\n  webapp:\r\n    use_nginx: 1\r\n    run_migrations: 1\r\n    appstack: puma\r\n  postgres:\r\n    host: 127.0.0.1\r\n    user: todo\r\n    password: p03tgR3s\r\n    database: todo\r\n```\r\n\r\nYou could also use a testing tool such as [roundup](http://bmizerany.github.com/roundup/ \"roundup\"), [minitest](https://github.com/seattlerb/minitest) or [rspec](http://rspec.info/ \"RSpec.info: home\") to do local integration tests. Within each group of tests, apply the current BOSH release with an example manifest and assert that specific processes and outcomes are observed.\r\n\r\nExample manifests assume that there is only one VM. For example, the `properties.postgres.host` is set to `127.0.0.1`. When the BOSH release is deployed into production it would be a real IP or DNS.\r\n\r\nAllowing you to iterate on BOSH releases within a local VM means you can quickly see any errors during package compilation or the running of jobs via monit. All log files within `/var/vcap/sys/log` can be displayed or tailed using one of the following examples:\r\n\r\n```\r\nsm bosh-solo tail_logs -n 200 # for each log file show last 200 lines\r\nsm bosh-solo tail_logs -f     # for each log file, tail any new output\r\nsm bosh-solo tail_error_logs  # as above, only for err/error log files\r\n```\r\n\r\n## Installation\r\n\r\nThe project is installed and operated by the [SM framework](https://github.com/sm/sm). Installation instructions for SM, git\r\n\r\nInstall SM and git:\r\n\r\n```\r\napt-get install git-core curl -y\r\ncurl -L https://get.smf.sh | sh\r\nsource /etc/profile.d/sm.sh\r\n```\r\n\r\nInstall bosh-solo and prepare the target machine/VM for deploying a BOSH release:\r\n\r\n```\r\nsm ext install bosh-solo git://github.com/drnic/bosh-solo.git\r\nsm bosh-solo install_dependencies\r\n```\r\n\r\n### Updating bosh-solo\r\n\r\n```\r\nsm ext update bosh-solo\r\n```\r\n\r\n### Other commands\r\n\r\nTo discover the complete list of available commands, either read the scripts in [bosh-solo bin/](https://github.com/drnic/bosh-solo/tree/master/bin) folder, or run:\r\n\r\n```\r\nsm bosh-solo\r\n```\r\n\r\n## Usage\r\n\r\nThe are two modes to use: a local Vagrant VM or a remote VM.\r\n\r\n### Vagrant usage\r\n\r\n[Install SM framework](https://github.com/sm/sm#installation) and bosh-solo into your local machine. Do not run `install_dependencies` as this is a script for the target Vagrant VM, not your laptop.\r\n\r\n```\r\n[inside local machine]\r\ncurl -L https://get.smf.sh | sh\r\nsource /etc/profile.d/sm.sh\r\nsm ext install bosh-solo git://github.com/drnic/bosh-solo.git\r\n```\r\n\r\nCreate a `Vagrantfile` into your BOSH release and launch Vagrant. If you haven't used Vagrant to download the `lucid64` box before it will be automatically downloaded.\r\n\r\n```\r\nsm bosh-solo local vagrantfile\r\ngem install vagrant\r\nvagrant up\r\nvagrant ssh\r\n```\r\n\r\nInside your Vagrant VM you now install SM, the bosh-solo extension, and prepare the VM with dependencies:\r\n\r\n\r\n```\r\n[inside vagrant as vagrant user]\r\nsudo su -\r\n\r\n[inside vagrant as root user]\r\napt-get install curl git-core -y\r\n\r\ncurl -L https://get.smf.sh | sh\r\nsource /etc/profile.d/sm.sh\r\nsm ext install bosh-solo git://github.com/drnic/bosh-solo.git\r\nsm bosh-solo install_dependencies\r\nsource /etc/profile.d/rvm.sh\r\nrvm 1.9.3 --default\r\n```\r\n\r\nYou are now ready to install & deploy your bosh release over and over again.\r\n\r\nEach time you want to deploy a change to your BOSH release into your Vagrant VM:\r\n\r\n```\r\n[within your local machine in BOSH release folder]\r\nbosh create release --force\r\n\r\n[inside vagrant as root user]\r\ncd /vagrant/\r\nsm bosh-solo update examples/example.yml\r\n```\r\n\r\nThe generated Vagrantfile forwards the internal port `:80` to your local machine's port `:5001`. That is [http://localhost:5001](http://localhost:5001) in your browser will go to `localhost:80` within your Vagrant VM.\r\n\r\n### Remote VM usage\r\n\r\nClone your BOSH release into your remote VM. Create a dev release (which will also sync download any blobs that are required), and run the bosh-solo `update` command.\r\n\r\n```\r\ngit clone git://location.com/your/bosh_release.git\r\ncd bosh_release\r\nbosh create release\r\nsm bosh-solo update path/to/manifest.yml\r\n```\r\n\r\nWhenever you update your BOSH release repository, you can fetch the changes and update your remote VM with the new packages and jobs:\r\n\r\n```\r\ngit pull origin master\r\nbosh create release --force\r\nsm bosh-solo update path/to/manifest.yml\r\n```\r\n\r\n\r\n## Full tutorials\r\n\r\n### Full tutorial on local Vagrant VM\r\n\r\nCommands below are run either within your local machine (laptop) or within a Vagrant VM that will be provisioned:\r\n\r\nFetch the example BOSH release and create a release:\r\n\r\n```\r\n[inside local machine]\r\ngit clone git://github.com/drnic/bosh-sample-release.git -b merge\r\ncd bosh-sample-release\r\ngem install bosh_cli\r\nbosh create release\r\n```\r\n\r\nNow install bosh-solo via SM framework:\r\n\r\n```\r\n[inside local machine]\r\ncurl -L https://get.smf.sh | sh\r\nsource /etc/profile.d/sm.sh\r\nsm ext install bosh-solo git://github.com/drnic/bosh-solo.git\r\n```\r\n\r\nNow create a Vagrant file and launch Vagrant VM:\r\n\r\n```\r\n[inside local machine]\r\nsm bosh-solo local vagrantfile\r\ngem install vagrant\r\nvagrant up\r\nvagrant ssh\r\n```\r\n\r\nYou are now inside the Vagrant VM. Install bosh-solo within the VM. Also install the dependencies required for deploying BOSH releases via bosh-solo.\r\n\r\n```\r\n[inside vagrant as vagrant user]\r\nsudo su -\r\n\r\n[inside vagrant as root user]\r\napt-get install curl git-core -y\r\n\r\ncurl -L https://get.smf.sh | sh\r\nsource /etc/profile.d/sm.sh\r\nsm ext install bosh-solo git://github.com/drnic/bosh-solo.git\r\nsm bosh-solo install_dependencies\r\n\r\nsource /etc/profile.d/rvm.sh\r\nrvm 1.9.3 --default\r\n```\r\n\r\nNow go to `/vagrant` directory where your bosh release is shared within the VM:\r\n\r\n```\r\n[inside vagrant as root user]\r\ncd /vagrant\r\nsm bosh-solo update examples/solo.yml\r\n```\r\n\r\n### Full tutorial on remote VM\r\n\r\nAll commands are run within your remove, Ubuntu 64-bit VM. \r\n\r\nNOTE: Remember to attach a large enough root volume for your release (or attach it at `/var/vcap`). For example, the [oss-release](https://github.com/cloudfoundry/oss-release) (jenkins/gerrit) is too big to build against the default size 8G root volume created by fog.\r\n\r\n\r\n```\r\ngit clone git://github.com/drnic/bosh-sample-release.git -b merge\r\ncd bosh-sample-release\r\nsm bosh-solo update examples/solo.yml\r\n```\r\n\r\nThe complete, end-to-end tutorial is therefore:\r\n\r\n```\r\nsudo su -\r\n\r\napt-get install curl git-core -y\r\n\r\ncurl -L https://get.smf.sh | sh\r\nsource /etc/profile.d/sm.sh\r\n\r\nsm ext install bosh-solo git://github.com/drnic/bosh-solo.git\r\nsm bosh-solo install_dependencies\r\n\r\nsource /etc/profile.d/rvm.sh\r\nrvm 1.9.3 --default\r\n\r\ngit clone git://github.com/drnic/bosh-sample-release.git -b merge\r\ncd bosh-sample-release\r\nbosh create release\r\nsm bosh-solo update examples/solo.yml\r\n```\r\n\r\n## Development\r\n\r\nThis section described the processes and rules for developing on bosh-solo itself.\r\n\r\nThe HEAD of the master branch is the currently released version of bosh-solo, due to the installation method with SM framework.\r\n\r\nTherefore, all development and testing should be done in branches.\r\n\r\n### Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n6. Send extra spicy Doritos to Dr Nic\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"bosh-solo","google":""}