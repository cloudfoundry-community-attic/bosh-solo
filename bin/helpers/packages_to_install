#!/usr/bin/env ruby

# Prints an ordered list of packages to be installed, based on their dependencies

work_dir = ARGV.shift || "/vagrant"

require "yaml"
require "rubygems"

ENV["BUNDLE_GEMFILE"] = "/bosh/cli/Gemfile"
require "bundler/setup"
$:.unshift("/bosh/cli/lib")
require "cli"

include Bosh::Cli::DependencyHelper # for tsort_packages

# Convert a full host-machine file path (relative to release project)
# into a full guest-machine file path
# e.g.
# from: /Users/drnic/Projects/bosh_releases/rackapp-boshrelease/dev_releases/rackapp-boshrelease-0.6-dev.yml
# to: /vagrant/dev_releases/rackapp-boshrelease-0.6-dev.yml
def local_manifest_path(hostmachine_manifest_path, work_dir)
  if hostmachine_manifest_path =~ %r{(/(?:dev_releases|releases)/.*)$}
    File.join(work_dir, ${extension_args[1]})
  else
    hostmachine_manifest_path
  end
end

def error(*msgs); msgs.each {|msg| $stderr.puts msg}; exit 1; end
def error_no_release_created; error "ERROR: Please create a BOSH release first.", "Run:", "  bosh create release"; end

Bosh::Cli::Config.output = STDERR

# assumes that latest release is a manifest yaml file
# e.g. dev_releases/rackapp-boshrelease-0.6-dev.yml
# e.g. releases/rackapp-boshrelease-2.yml
release            = Bosh::Cli::Release.new(work_dir)
error_no_release_created unless release.latest_release_filename

host_manifest_path = release.latest_release_filename
manifest_path      = local_manifest_path(host_manifest_path, work_dir)
manifest           = YAML.load_file(manifest_path)

package_index = manifest["packages"].inject({}) do |index, package|
  index[package["name"]] = package["dependencies"]
  index
end
sorted_packages = tsort_packages(package_index)
sorted_packages.each do |package_name|
  puts package_name
end
